Genetic Sudoku Experiment
Experiment Time: 27/06/2016 10:27:20
Expirement Parameters:,
Orginal Empty Cells:,54,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,21.0,2.0,11.62,Mod( Plus( Minimum( div( Plus( NumOfOptionsInCell  countEmptyCellInRow )  Mod( countEmptyCellsInRowsContainsNum  countEmptyCellInCol ) )  Minus( Plus( NumOfOptionsInCell  countEmptyCellInCol )  Mod( countEmptyCellInCol  countEmptyCellsInSquare_ThatNotContainsNum ) ) )  Minimum( Multi( Maximum( countEmptyCellsInColsContainsNum  countEmptyCellsInSquareContainsNum )  Minus( NumOfOptionsInCell  countEmptyCellsInCols_ThatNotContainsNum ) )  Maximum( div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  Minimum( NumOfOptionsInCell  countEmptyCellInSquare ) ) ) )  Maximum( Plus( Mod( Minus( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum )  Mod( NumOfOptionsInCell  countEmptyCellsInRows_ThatNotContainsNum ) )  Multi( Maximum( countEmptyCellInSquare  NumOfOptionsInCell )  Multi( NumOfOptionsInCell  NumOfOptionsInCell ) ) )  Multi( div( Minimum( countEmptyCellsInColsContainsNum  countEmptyCellInSquare )  div( countEmptyCellsInColsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  div( Multi( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum )  Minimum( countEmptyCellsInRowsContainsNum  numOfOptionsToAppearInBoard ) ) ) ) ),((((( NumOfOptionsInCell  +  countEmptyCellInRow ) / ( countEmptyCellsInRowsContainsNum  %  countEmptyCellInCol )) Min (( NumOfOptionsInCell  +  countEmptyCellInCol ) - ( countEmptyCellInCol  %  countEmptyCellsInSquare_ThatNotContainsNum ))) + ((( countEmptyCellsInColsContainsNum  Max  countEmptyCellsInSquareContainsNum ) * ( NumOfOptionsInCell  -  countEmptyCellsInCols_ThatNotContainsNum )) Min (( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum ) Max ( NumOfOptionsInCell  Min  countEmptyCellInSquare )))) % (((( countEmptyCellInSquare  -  countEmptyCellsInRowsContainsNum ) % ( NumOfOptionsInCell  %  countEmptyCellsInRows_ThatNotContainsNum )) + (( countEmptyCellInSquare  Max  NumOfOptionsInCell ) * ( NumOfOptionsInCell  *  NumOfOptionsInCell ))) Max ((( countEmptyCellsInColsContainsNum  Min  countEmptyCellInSquare ) / ( countEmptyCellsInColsContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum )) * (( countEmptyCellsInSquareContainsNum  *  countEmptyCellsInColsContainsNum ) / ( countEmptyCellsInRowsContainsNum  Min  numOfOptionsToAppearInBoard ))))),
1,19.0,0.0,11.1,Maximum( Minimum( Plus( div( Maximum( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum )  Minimum( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum ) )  Minus( Maximum( countEmptyCellsInColsContainsNum  countEmptyCellInSquare )  Mod( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInCol ) ) )  Maximum( Minimum( Minus( numOfOptionsToAppearInBoard  countEmptyCellInSquare )  div( countEmptyCellsInSquare_ThatNotContainsNum  NumOfOptionsInCell ) )  Plus( Multi( NumOfOptionsInCell  NumOfOptionsInCell )  div( NumOfOptionsInCell  countEmptyCellInRow ) ) ) )  Mod( Mod( Minus( Plus( countEmptyCellsInCols_ThatNotContainsNum  NumOfOptionsInCell )  Multi( countEmptyCellInRow  NumOfOptionsInCell ) )  Multi( Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInColsContainsNum )  Minus( NumOfOptionsInCell  countEmptyCellsInRowsContainsNum ) ) )  Minimum( Minimum( Minimum( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInColsContainsNum )  div( countEmptyCellInSquare  countEmptyCellInRow ) )  Maximum( Minimum( countEmptyCellInCol  numOfOptionsToAppearInBoard )  Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) ) ) ) ),((((( countEmptyCellInSquare  Max  countEmptyCellsInRowsContainsNum ) / ( countEmptyCellsInSquareContainsNum  Min  countEmptyCellsInColsContainsNum )) + (( countEmptyCellsInColsContainsNum  Max  countEmptyCellInSquare ) - ( countEmptyCellsInCols_ThatNotContainsNum  %  countEmptyCellInCol ))) Min ((( numOfOptionsToAppearInBoard  -  countEmptyCellInSquare ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  /  NumOfOptionsInCell )) Max (( NumOfOptionsInCell  *  NumOfOptionsInCell ) + ( NumOfOptionsInCell  /  countEmptyCellInRow )))) Max (((( countEmptyCellsInCols_ThatNotContainsNum  +  NumOfOptionsInCell ) - ( countEmptyCellInRow  *  NumOfOptionsInCell )) % (( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellsInColsContainsNum ) * ( NumOfOptionsInCell  -  countEmptyCellsInRowsContainsNum ))) % ((( countEmptyCellsInSquare_ThatNotContainsNum  Min  countEmptyCellsInColsContainsNum ) Min ( countEmptyCellInSquare  /  countEmptyCellInRow )) Min (( countEmptyCellInCol  Min  numOfOptionsToAppearInBoard ) Max ( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellsInCols_ThatNotContainsNum ))))),
