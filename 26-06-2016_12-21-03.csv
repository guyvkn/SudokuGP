Genetic Sudoku Experiment
Experiment Time: 26/06/2016 12:21:03
Expirement Parameters:,
Orginal Empty Cells:,50,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,17.0,4.0,11.21,Maximum( Minus( Minimum( Plus( Plus( countEmptyCellInRow  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellsInSquareContainsNum  countEmptyCellInSquare ) )  Minus( Mod( NumOfOptionsInCell  countEmptyCellsInSquare_ThatNotContainsNum )  Minimum( NumOfOptionsInCell  countEmptyCellsInSquareContainsNum ) ) )  Plus( Mod( Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInSquareContainsNum )  Maximum( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Minimum( Mod( NumOfOptionsInCell  countEmptyCellsInColsContainsNum )  Maximum( countEmptyCellInRow  countEmptyCellsInSquareContainsNum ) ) ) )  div( Mod( Mod( Minimum( countEmptyCellsInRowsContainsNum  countEmptyCellInRow )  Minus( countEmptyCellInSquare  countEmptyCellInRow ) )  Minimum( Plus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInCol )  Plus( countEmptyCellsInSquare_ThatNotContainsNum  NumOfOptionsInCell ) ) )  Minimum( Minimum( Mod( countEmptyCellsInSquareContainsNum  countEmptyCellsInRowsContainsNum )  Maximum( countEmptyCellInCol  countEmptyCellsInRows_ThatNotContainsNum ) )  div( Maximum( countEmptyCellsInColsContainsNum  numOfOptionsToAppearInBoard )  Mod( NumOfOptionsInCell  countEmptyCellInSquare ) ) ) ) ),((((( countEmptyCellInRow  +  countEmptyCellsInCols_ThatNotContainsNum ) + ( countEmptyCellsInSquareContainsNum  +  countEmptyCellInSquare )) Min (( NumOfOptionsInCell  %  countEmptyCellsInSquare_ThatNotContainsNum ) - ( NumOfOptionsInCell  Min  countEmptyCellsInSquareContainsNum ))) - ((( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellsInSquareContainsNum ) % ( countEmptyCellsInRows_ThatNotContainsNum  Max  countEmptyCellsInCols_ThatNotContainsNum )) + (( NumOfOptionsInCell  %  countEmptyCellsInColsContainsNum ) Min ( countEmptyCellInRow  Max  countEmptyCellsInSquareContainsNum )))) Max (((( countEmptyCellsInRowsContainsNum  Min  countEmptyCellInRow ) % ( countEmptyCellInSquare  -  countEmptyCellInRow )) % (( countEmptyCellsInSquare_ThatNotContainsNum  +  countEmptyCellInCol ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  +  NumOfOptionsInCell ))) / ((( countEmptyCellsInSquareContainsNum  %  countEmptyCellsInRowsContainsNum ) Min ( countEmptyCellInCol  Max  countEmptyCellsInRows_ThatNotContainsNum )) Min (( countEmptyCellsInColsContainsNum  Max  numOfOptionsToAppearInBoard ) / ( NumOfOptionsInCell  %  countEmptyCellInSquare ))))),
1,17.0,0.0,10.67,Multi( div( Maximum( Mod( div( countEmptyCellInSquare  countEmptyCellsInRows_ThatNotContainsNum )  div( countEmptyCellsInColsContainsNum  numOfOptionsToAppearInBoard ) )  Maximum( Multi( countEmptyCellsInRowsContainsNum  NumOfOptionsInCell )  Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) ) )  Minimum( Minimum( Mod( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell )  Plus( countEmptyCellsInSquareContainsNum  countEmptyCellInRow ) )  div( Minus( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum )  Maximum( countEmptyCellInSquare  countEmptyCellsInColsContainsNum ) ) ) )  div( div( Maximum( div( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Minimum( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell ) )  Minimum( Maximum( numOfOptionsToAppearInBoard  countEmptyCellInCol )  Minus( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell ) ) )  Minus( Mod( Maximum( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInRow )  Minimum( countEmptyCellInCol  countEmptyCellInRow ) )  Maximum( Plus( numOfOptionsToAppearInBoard  numOfOptionsToAppearInBoard )  Mod( countEmptyCellInRow  countEmptyCellsInRows_ThatNotContainsNum ) ) ) ) ),((((( countEmptyCellInSquare  /  countEmptyCellsInRows_ThatNotContainsNum ) % ( countEmptyCellsInColsContainsNum  /  numOfOptionsToAppearInBoard )) Max (( countEmptyCellsInRowsContainsNum  *  NumOfOptionsInCell ) Max ( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellsInColsContainsNum ))) / ((( countEmptyCellsInRows_ThatNotContainsNum  %  NumOfOptionsInCell ) Min ( countEmptyCellsInSquareContainsNum  +  countEmptyCellInRow )) Min (( countEmptyCellsInSquareContainsNum  -  countEmptyCellsInColsContainsNum ) / ( countEmptyCellInSquare  Max  countEmptyCellsInColsContainsNum )))) * (((( countEmptyCellsInSquareContainsNum  /  countEmptyCellsInSquare_ThatNotContainsNum ) Max ( countEmptyCellsInRows_ThatNotContainsNum  Min  NumOfOptionsInCell )) / (( numOfOptionsToAppearInBoard  Max  countEmptyCellInCol ) Min ( countEmptyCellsInRows_ThatNotContainsNum  -  NumOfOptionsInCell ))) / ((( countEmptyCellsInSquare_ThatNotContainsNum  Max  countEmptyCellInRow ) % ( countEmptyCellInCol  Min  countEmptyCellInRow )) - (( numOfOptionsToAppearInBoard  +  numOfOptionsToAppearInBoard ) Max ( countEmptyCellInRow  %  countEmptyCellsInRows_ThatNotContainsNum ))))),
