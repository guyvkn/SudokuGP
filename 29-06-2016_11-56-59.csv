Genetic Sudoku Experiment
Experiment Time: 29/06/2016 11:56:59
Expirement Parameters:,
Orginal Empty Cells:,55,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,19.0,3.0,11.95,Maximum( div( Minus( Minimum( div( countEmptyCellsInSquareContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  div( countEmptyCellsInColsContainsNum  countEmptyCellsInColsContainsNum ) )  Plus( Multi( countEmptyCellInSquare  countEmptyCellInRow )  Maximum( countEmptyCellsInRows_ThatNotContainsNum  numOfOptionsToAppearInBoard ) ) )  Multi( div( Plus( numOfOptionsToAppearInBoard  numOfOptionsToAppearInBoard )  Plus( countEmptyCellsInRowsContainsNum  countEmptyCellInSquare ) )  div( div( countEmptyCellsInColsContainsNum  NumOfOptionsInCell )  Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInSquare ) ) ) )  div( div( Maximum( Minus( NumOfOptionsInCell  countEmptyCellInCol )  Minus( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum ) )  Maximum( Plus( countEmptyCellsInRowsContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Plus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInRow ) ) )  Minimum( Plus( Minus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInSquareContainsNum )  Minus( countEmptyCellsInRowsContainsNum  NumOfOptionsInCell ) )  div( div( countEmptyCellInRow  countEmptyCellsInSquareContainsNum )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) ) ) ) ),((((( countEmptyCellsInSquareContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum ) Min ( countEmptyCellsInColsContainsNum  /  countEmptyCellsInColsContainsNum )) - (( countEmptyCellInSquare  *  countEmptyCellInRow ) + ( countEmptyCellsInRows_ThatNotContainsNum  Max  numOfOptionsToAppearInBoard ))) / ((( numOfOptionsToAppearInBoard  +  numOfOptionsToAppearInBoard ) / ( countEmptyCellsInRowsContainsNum  +  countEmptyCellInSquare )) * (( countEmptyCellsInColsContainsNum  /  NumOfOptionsInCell ) / ( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellInSquare )))) Max (((( NumOfOptionsInCell  -  countEmptyCellInCol ) Max ( countEmptyCellInSquare  -  countEmptyCellsInRowsContainsNum )) / (( countEmptyCellsInRowsContainsNum  +  countEmptyCellsInRows_ThatNotContainsNum ) Max ( countEmptyCellsInRows_ThatNotContainsNum  +  countEmptyCellInRow ))) / ((( countEmptyCellsInRows_ThatNotContainsNum  -  countEmptyCellsInSquareContainsNum ) + ( countEmptyCellsInRowsContainsNum  -  NumOfOptionsInCell )) Min (( countEmptyCellInRow  /  countEmptyCellsInSquareContainsNum ) / ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum ))))),
1,21.0,3.0,11.7,Multi( Multi( Plus( Minus( Minimum( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Plus( countEmptyCellInSquare  countEmptyCellInSquare ) )  Maximum( Minus( countEmptyCellInRow  countEmptyCellsInRows_ThatNotContainsNum )  Plus( countEmptyCellsInSquareContainsNum  countEmptyCellInCol ) ) )  Plus( Minus( Minus( countEmptyCellsInSquareContainsNum  countEmptyCellInCol )  Multi( countEmptyCellsInColsContainsNum  countEmptyCellsInRowsContainsNum ) )  Minimum( Maximum( countEmptyCellsInSquare_ThatNotContainsNum  numOfOptionsToAppearInBoard )  Minimum( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) ) ) )  Minimum( div( Plus( Mod( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum )  Maximum( countEmptyCellsInRowsContainsNum  countEmptyCellInCol ) )  Multi( Minus( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell )  div( countEmptyCellsInColsContainsNum  countEmptyCellsInSquare_ThatNotContainsNum ) ) )  Multi( Plus( Minimum( numOfOptionsToAppearInBoard  countEmptyCellInSquare )  Plus( countEmptyCellInCol  countEmptyCellInCol ) )  Plus( div( numOfOptionsToAppearInBoard  countEmptyCellInRow )  Minus( countEmptyCellInCol  countEmptyCellsInSquareContainsNum ) ) ) ) ),((((( countEmptyCellsInSquare_ThatNotContainsNum  Min  countEmptyCellsInSquare_ThatNotContainsNum ) - ( countEmptyCellInSquare  +  countEmptyCellInSquare )) + (( countEmptyCellInRow  -  countEmptyCellsInRows_ThatNotContainsNum ) Max ( countEmptyCellsInSquareContainsNum  +  countEmptyCellInCol ))) * ((( countEmptyCellsInSquareContainsNum  -  countEmptyCellInCol ) - ( countEmptyCellsInColsContainsNum  *  countEmptyCellsInRowsContainsNum )) + (( countEmptyCellsInSquare_ThatNotContainsNum  Max  numOfOptionsToAppearInBoard ) Min ( countEmptyCellsInCols_ThatNotContainsNum  Min  countEmptyCellsInColsContainsNum )))) * (((( countEmptyCellInSquare  %  countEmptyCellsInRowsContainsNum ) + ( countEmptyCellsInRowsContainsNum  Max  countEmptyCellInCol )) / (( countEmptyCellsInRows_ThatNotContainsNum  -  NumOfOptionsInCell ) * ( countEmptyCellsInColsContainsNum  /  countEmptyCellsInSquare_ThatNotContainsNum ))) Min ((( numOfOptionsToAppearInBoard  Min  countEmptyCellInSquare ) + ( countEmptyCellInCol  +  countEmptyCellInCol )) * (( numOfOptionsToAppearInBoard  /  countEmptyCellInRow ) + ( countEmptyCellInCol  -  countEmptyCellsInSquareContainsNum ))))),
2,19.0,4.0,11.53,Minimum( Plus( div( Minimum( div( numOfOptionsToAppearInBoard  countEmptyCellInSquare )  Plus( countEmptyCellsInRowsContainsNum  countEmptyCellsInColsContainsNum ) )  Minimum( Minus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInCol )  div( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell ) ) )  Plus( Mod( Multi( countEmptyCellInCol  NumOfOptionsInCell )  Multi( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInRow ) )  Mod( Multi( countEmptyCellInSquare  countEmptyCellInCol )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInRow ) ) ) )  Minus( Minimum( Multi( div( NumOfOptionsInCell  countEmptyCellsInRows_ThatNotContainsNum )  Multi( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) )  Maximum( Multi( numOfOptionsToAppearInBoard  countEmptyCellsInCols_ThatNotContainsNum )  Maximum( countEmptyCellsInSquareContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) ) )  div( Minimum( Minus( countEmptyCellInRow  NumOfOptionsInCell )  div( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum ) )  Maximum( Multi( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Minus( countEmptyCellInRow  countEmptyCellInCol ) ) ) ) ),((((( numOfOptionsToAppearInBoard  /  countEmptyCellInSquare ) Min ( countEmptyCellsInRowsContainsNum  +  countEmptyCellsInColsContainsNum )) / (( countEmptyCellsInSquare_ThatNotContainsNum  -  countEmptyCellInCol ) Min ( countEmptyCellsInRows_ThatNotContainsNum  /  NumOfOptionsInCell ))) + ((( countEmptyCellInCol  *  NumOfOptionsInCell ) % ( countEmptyCellsInRows_ThatNotContainsNum  *  countEmptyCellInRow )) + (( countEmptyCellInSquare  *  countEmptyCellInCol ) % ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellInRow )))) Min (((( NumOfOptionsInCell  /  countEmptyCellsInRows_ThatNotContainsNum ) * ( countEmptyCellsInCols_ThatNotContainsNum  *  countEmptyCellsInColsContainsNum )) Min (( numOfOptionsToAppearInBoard  *  countEmptyCellsInCols_ThatNotContainsNum ) Max ( countEmptyCellsInSquareContainsNum  Max  countEmptyCellsInCols_ThatNotContainsNum ))) - ((( countEmptyCellInRow  -  NumOfOptionsInCell ) Min ( countEmptyCellsInSquareContainsNum  /  countEmptyCellsInColsContainsNum )) / (( countEmptyCellsInSquareContainsNum  *  countEmptyCellsInSquare_ThatNotContainsNum ) Max ( countEmptyCellInRow  -  countEmptyCellInCol ))))),
