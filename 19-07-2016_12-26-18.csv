Genetic Sudoku Experiment
Experiment Time: 19/07/2016 12:26:18
Expirement Parameters:,
Orginal Empty Cells:,55,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,22.0,6.0,12.09,div( Plus( Minus( Mod( Plus( countEmptyCellInRow  countEmptyCellInRow )  div( countEmptyCellInRow  countEmptyCellsInColsContainsNum ) )  Minimum( Maximum( numOfOptionsToAppearInBoard  countEmptyCellInRow )  Maximum( NumOfOptionsInCell  countEmptyCellsInSquareContainsNum ) ) )  Mod( Plus( Plus( countEmptyCellInCol  numOfOptionsToAppearInBoard )  Minus( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Minus( Multi( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Minimum( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) ) ) )  div( Minus( div( Plus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInRowsContainsNum )  Mod( countEmptyCellInSquare  countEmptyCellInSquare ) )  div( Plus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInSquareContainsNum )  Plus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInRow ) ) )  Minus( div( Minimum( countEmptyCellsInRowsContainsNum  NumOfOptionsInCell )  Minus( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquare_ThatNotContainsNum ) )  div( div( countEmptyCellsInColsContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellsInSquareContainsNum  countEmptyCellInRow ) ) ) ) ),((((( countEmptyCellInRow  +  countEmptyCellInRow ) % ( countEmptyCellInRow  /  countEmptyCellsInColsContainsNum )) - (( numOfOptionsToAppearInBoard  Max  countEmptyCellInRow ) Min ( NumOfOptionsInCell  Max  countEmptyCellsInSquareContainsNum ))) + ((( countEmptyCellInCol  +  numOfOptionsToAppearInBoard ) + ( countEmptyCellsInRowsContainsNum  -  countEmptyCellsInCols_ThatNotContainsNum )) % (( countEmptyCellsInSquare_ThatNotContainsNum  *  countEmptyCellsInRows_ThatNotContainsNum ) - ( countEmptyCellsInSquare_ThatNotContainsNum  Min  countEmptyCellsInColsContainsNum )))) / (((( countEmptyCellsInRows_ThatNotContainsNum  +  countEmptyCellsInRowsContainsNum ) / ( countEmptyCellInSquare  %  countEmptyCellInSquare )) - (( countEmptyCellsInSquare_ThatNotContainsNum  +  countEmptyCellsInSquareContainsNum ) / ( countEmptyCellsInSquare_ThatNotContainsNum  +  countEmptyCellInRow ))) / ((( countEmptyCellsInRowsContainsNum  Min  NumOfOptionsInCell ) / ( countEmptyCellsInSquareContainsNum  -  countEmptyCellsInSquare_ThatNotContainsNum )) - (( countEmptyCellsInColsContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum ) / ( countEmptyCellsInSquareContainsNum  +  countEmptyCellInRow ))))),
1,21.0,5.0,11.65,Minus( Minus( Mod( Maximum( Plus( numOfOptionsToAppearInBoard  countEmptyCellInCol )  Plus( countEmptyCellInRow  numOfOptionsToAppearInBoard ) )  Minimum( Minus( numOfOptionsToAppearInBoard  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellsInSquare_ThatNotContainsNum  NumOfOptionsInCell ) ) )  Minimum( Multi( div( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  div( countEmptyCellInRow  countEmptyCellsInSquareContainsNum ) )  Plus( div( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInColsContainsNum )  div( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum ) ) ) )  Multi( Multi( div( Multi( countEmptyCellInRow  NumOfOptionsInCell )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInRow ) )  Maximum( Minus( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Maximum( countEmptyCellsInRowsContainsNum  countEmptyCellsInRows_ThatNotContainsNum ) ) )  Minus( Plus( Plus( countEmptyCellsInRowsContainsNum  NumOfOptionsInCell )  Minimum( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInCol ) )  Minimum( div( countEmptyCellsInColsContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Minus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInRow ) ) ) ) ),((((( numOfOptionsToAppearInBoard  +  countEmptyCellInCol ) Max ( countEmptyCellInRow  +  numOfOptionsToAppearInBoard )) % (( numOfOptionsToAppearInBoard  -  countEmptyCellsInCols_ThatNotContainsNum ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  +  NumOfOptionsInCell ))) - ((( countEmptyCellsInCols_ThatNotContainsNum  /  countEmptyCellsInRows_ThatNotContainsNum ) * ( countEmptyCellInRow  /  countEmptyCellsInSquareContainsNum )) Min (( countEmptyCellsInSquare_ThatNotContainsNum  /  countEmptyCellsInColsContainsNum ) + ( countEmptyCellsInSquareContainsNum  /  countEmptyCellsInColsContainsNum )))) - (((( countEmptyCellInRow  *  NumOfOptionsInCell ) / ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellInRow )) * (( countEmptyCellsInSquareContainsNum  -  countEmptyCellsInSquare_ThatNotContainsNum ) Max ( countEmptyCellsInRowsContainsNum  Max  countEmptyCellsInRows_ThatNotContainsNum ))) * ((( countEmptyCellsInRowsContainsNum  +  NumOfOptionsInCell ) + ( countEmptyCellsInCols_ThatNotContainsNum  Min  countEmptyCellInCol )) - (( countEmptyCellsInColsContainsNum  /  countEmptyCellsInRows_ThatNotContainsNum ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  -  countEmptyCellInRow ))))),
