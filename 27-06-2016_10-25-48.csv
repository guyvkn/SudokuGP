Genetic Sudoku Experiment
Experiment Time: 27/06/2016 10:25:48
Expirement Parameters:,
Orginal Empty Cells:,55,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,21.0,6.0,12.59,Minimum( Maximum( Plus( Minus( div( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInRow )  Minimum( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquare_ThatNotContainsNum ) )  Maximum( Plus( NumOfOptionsInCell  countEmptyCellInRow )  Minus( numOfOptionsToAppearInBoard  countEmptyCellsInSquare_ThatNotContainsNum ) ) )  Minus( Multi( Mod( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInColsContainsNum )  Multi( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum ) )  Maximum( Multi( countEmptyCellsInSquareContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Mod( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInRow ) ) ) )  Maximum( Multi( Minimum( Minus( countEmptyCellInCol  countEmptyCellsInRowsContainsNum )  div( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Multi( div( countEmptyCellInCol  countEmptyCellInCol )  Plus( countEmptyCellInCol  countEmptyCellsInColsContainsNum ) ) )  Minus( Mod( Multi( NumOfOptionsInCell  countEmptyCellsInColsContainsNum )  Minus( countEmptyCellInCol  countEmptyCellInCol ) )  Minimum( Mod( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Multi( countEmptyCellInSquare  numOfOptionsToAppearInBoard ) ) ) ) ),((((( countEmptyCellsInSquare_ThatNotContainsNum  /  countEmptyCellInRow ) - ( countEmptyCellsInSquareContainsNum  Min  countEmptyCellsInSquare_ThatNotContainsNum )) + (( NumOfOptionsInCell  +  countEmptyCellInRow ) Max ( numOfOptionsToAppearInBoard  -  countEmptyCellsInSquare_ThatNotContainsNum ))) Max ((( countEmptyCellsInCols_ThatNotContainsNum  %  countEmptyCellsInColsContainsNum ) * ( countEmptyCellsInSquare_ThatNotContainsNum  *  countEmptyCellsInRows_ThatNotContainsNum )) - (( countEmptyCellsInSquareContainsNum  *  countEmptyCellsInRows_ThatNotContainsNum ) Max ( countEmptyCellsInCols_ThatNotContainsNum  %  countEmptyCellInRow )))) Min (((( countEmptyCellInCol  -  countEmptyCellsInRowsContainsNum ) Min ( countEmptyCellsInCols_ThatNotContainsNum  /  countEmptyCellsInCols_ThatNotContainsNum )) * (( countEmptyCellInCol  /  countEmptyCellInCol ) * ( countEmptyCellInCol  +  countEmptyCellsInColsContainsNum ))) Max ((( NumOfOptionsInCell  *  countEmptyCellsInColsContainsNum ) % ( countEmptyCellInCol  -  countEmptyCellInCol )) - (( countEmptyCellsInSquare_ThatNotContainsNum  %  countEmptyCellsInRows_ThatNotContainsNum ) Min ( countEmptyCellInSquare  *  numOfOptionsToAppearInBoard ))))),
1,20.0,3.0,12.4,Minimum( Maximum( Multi( div( Minus( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInRow )  Plus( countEmptyCellInRow  countEmptyCellsInColsContainsNum ) )  Minus( Minimum( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum )  Minus( NumOfOptionsInCell  numOfOptionsToAppearInBoard ) ) )  Multi( Minimum( Minimum( NumOfOptionsInCell  countEmptyCellsInRowsContainsNum )  Minus( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  div( div( countEmptyCellInSquare  numOfOptionsToAppearInBoard )  Plus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) ) ) )  Maximum( Maximum( Minimum( div( countEmptyCellsInRowsContainsNum  countEmptyCellsInSquareContainsNum )  Multi( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) )  Multi( Minimum( countEmptyCellsInRowsContainsNum  countEmptyCellInCol )  Multi( NumOfOptionsInCell  countEmptyCellsInSquare_ThatNotContainsNum ) ) )  div( Maximum( Plus( countEmptyCellInCol  countEmptyCellInSquare )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInSquare ) )  div( Plus( countEmptyCellsInSquareContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Plus( NumOfOptionsInCell  countEmptyCellsInColsContainsNum ) ) ) ) ),((((( countEmptyCellsInCols_ThatNotContainsNum  -  countEmptyCellInRow ) / ( countEmptyCellInRow  +  countEmptyCellsInColsContainsNum )) * (( countEmptyCellInSquare  Min  countEmptyCellsInRowsContainsNum ) - ( NumOfOptionsInCell  -  numOfOptionsToAppearInBoard ))) Max ((( NumOfOptionsInCell  Min  countEmptyCellsInRowsContainsNum ) Min ( countEmptyCellsInRowsContainsNum  -  countEmptyCellsInCols_ThatNotContainsNum )) * (( countEmptyCellInSquare  /  numOfOptionsToAppearInBoard ) / ( countEmptyCellsInRows_ThatNotContainsNum  +  countEmptyCellsInCols_ThatNotContainsNum )))) Min (((( countEmptyCellsInRowsContainsNum  /  countEmptyCellsInSquareContainsNum ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  *  countEmptyCellsInColsContainsNum )) Max (( countEmptyCellsInRowsContainsNum  Min  countEmptyCellInCol ) * ( NumOfOptionsInCell  *  countEmptyCellsInSquare_ThatNotContainsNum ))) Max ((( countEmptyCellInCol  +  countEmptyCellInSquare ) Max ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellInSquare )) / (( countEmptyCellsInSquareContainsNum  +  countEmptyCellsInRows_ThatNotContainsNum ) / ( NumOfOptionsInCell  +  countEmptyCellsInColsContainsNum ))))),
2,21.0,3.0,11.84,Minimum( Maximum( Multi( div( Minus( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInRow )  Plus( countEmptyCellInRow  countEmptyCellsInColsContainsNum ) )  Minus( Minimum( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum )  Minus( NumOfOptionsInCell  numOfOptionsToAppearInBoard ) ) )  Multi( Minimum( Minimum( NumOfOptionsInCell  countEmptyCellsInRowsContainsNum )  Minus( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  div( div( countEmptyCellInSquare  numOfOptionsToAppearInBoard )  Plus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) ) ) )  Maximum( Maximum( Minimum( div( countEmptyCellsInRowsContainsNum  countEmptyCellsInSquareContainsNum )  Multi( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) )  Multi( Minimum( countEmptyCellsInRowsContainsNum  countEmptyCellInCol )  Multi( NumOfOptionsInCell  countEmptyCellsInSquare_ThatNotContainsNum ) ) )  div( Maximum( Plus( countEmptyCellInCol  countEmptyCellInSquare )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInSquare ) )  div( Plus( countEmptyCellsInSquareContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Plus( NumOfOptionsInCell  countEmptyCellsInColsContainsNum ) ) ) ) ),((((( countEmptyCellsInCols_ThatNotContainsNum  -  countEmptyCellInRow ) / ( countEmptyCellInRow  +  countEmptyCellsInColsContainsNum )) * (( countEmptyCellInSquare  Min  countEmptyCellsInRowsContainsNum ) - ( NumOfOptionsInCell  -  numOfOptionsToAppearInBoard ))) Max ((( NumOfOptionsInCell  Min  countEmptyCellsInRowsContainsNum ) Min ( countEmptyCellsInRowsContainsNum  -  countEmptyCellsInCols_ThatNotContainsNum )) * (( countEmptyCellInSquare  /  numOfOptionsToAppearInBoard ) / ( countEmptyCellsInRows_ThatNotContainsNum  +  countEmptyCellsInCols_ThatNotContainsNum )))) Min (((( countEmptyCellsInRowsContainsNum  /  countEmptyCellsInSquareContainsNum ) Min ( countEmptyCellsInSquare_ThatNotContainsNum  *  countEmptyCellsInColsContainsNum )) Max (( countEmptyCellsInRowsContainsNum  Min  countEmptyCellInCol ) * ( NumOfOptionsInCell  *  countEmptyCellsInSquare_ThatNotContainsNum ))) Max ((( countEmptyCellInCol  +  countEmptyCellInSquare ) Max ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellInSquare )) / (( countEmptyCellsInSquareContainsNum  +  countEmptyCellsInRows_ThatNotContainsNum ) / ( NumOfOptionsInCell  +  countEmptyCellsInColsContainsNum ))))),
3,22.0,6.0,10.85,Mod( Minimum( div( Plus( Multi( NumOfOptionsInCell  countEmptyCellInRow )  Minus( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Multi( Maximum( countEmptyCellInRow  numOfOptionsToAppearInBoard )  Minimum( countEmptyCellInSquare  countEmptyCellsInRowsContainsNum ) ) )  Maximum( Maximum( Minimum( countEmptyCellsInRows_ThatNotContainsNum  NumOfOptionsInCell )  Mod( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Multi( Mod( countEmptyCellInSquare  countEmptyCellInRow )  Multi( countEmptyCellInSquare  countEmptyCellInSquare ) ) ) )  Minimum( Multi( Minus( Minus( countEmptyCellInCol  countEmptyCellsInColsContainsNum )  Minus( countEmptyCellInRow  countEmptyCellsInSquare_ThatNotContainsNum ) )  div( Mod( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInColsContainsNum )  div( countEmptyCellsInSquare_ThatNotContainsNum  NumOfOptionsInCell ) ) )  div( Maximum( div( countEmptyCellInRow  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInRow ) )  Multi( Minimum( NumOfOptionsInCell  countEmptyCellsInColsContainsNum )  Maximum( numOfOptionsToAppearInBoard  NumOfOptionsInCell ) ) ) ) ),((((( NumOfOptionsInCell  *  countEmptyCellInRow ) + ( countEmptyCellsInSquare_ThatNotContainsNum  -  countEmptyCellsInCols_ThatNotContainsNum )) / (( countEmptyCellInRow  Max  numOfOptionsToAppearInBoard ) * ( countEmptyCellInSquare  Min  countEmptyCellsInRowsContainsNum ))) Min ((( countEmptyCellsInRows_ThatNotContainsNum  Min  NumOfOptionsInCell ) Max ( countEmptyCellsInRowsContainsNum  %  countEmptyCellsInCols_ThatNotContainsNum )) Max (( countEmptyCellInSquare  %  countEmptyCellInRow ) * ( countEmptyCellInSquare  *  countEmptyCellInSquare )))) % (((( countEmptyCellInCol  -  countEmptyCellsInColsContainsNum ) - ( countEmptyCellInRow  -  countEmptyCellsInSquare_ThatNotContainsNum )) * (( countEmptyCellsInCols_ThatNotContainsNum  %  countEmptyCellsInColsContainsNum ) / ( countEmptyCellsInSquare_ThatNotContainsNum  /  NumOfOptionsInCell ))) Min ((( countEmptyCellInRow  /  countEmptyCellsInCols_ThatNotContainsNum ) Max ( countEmptyCellsInCols_ThatNotContainsNum  +  countEmptyCellInRow )) / (( NumOfOptionsInCell  Min  countEmptyCellsInColsContainsNum ) * ( numOfOptionsToAppearInBoard  Max  NumOfOptionsInCell ))))),
4,22.0,4.0,10.96,Minus( Maximum( Minus( Maximum( Minimum( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInRowsContainsNum )  div( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellInCol ) )  div( Plus( countEmptyCellsInColsContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Mod( countEmptyCellInSquare  countEmptyCellsInRows_ThatNotContainsNum ) ) )  div( Mod( Minimum( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInCol )  Maximum( countEmptyCellsInRowsContainsNum  countEmptyCellsInRows_ThatNotContainsNum ) )  Maximum( Minimum( countEmptyCellsInRowsContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Multi( numOfOptionsToAppearInBoard  countEmptyCellInSquare ) ) ) )  Minus( Minimum( Plus( Plus( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Plus( countEmptyCellsInSquareContainsNum  countEmptyCellsInColsContainsNum ) )  Plus( div( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInSquare )  Minus( countEmptyCellInCol  numOfOptionsToAppearInBoard ) ) )  Multi( Plus( Multi( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInSquare )  Maximum( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  div( Minimum( countEmptyCellInRow  countEmptyCellInSquare )  Plus( countEmptyCellsInRowsContainsNum  countEmptyCellInSquare ) ) ) ) ),((((( countEmptyCellsInRows_ThatNotContainsNum  Min  countEmptyCellsInRowsContainsNum ) Max ( countEmptyCellsInCols_ThatNotContainsNum  /  countEmptyCellInCol )) - (( countEmptyCellsInColsContainsNum  +  countEmptyCellsInSquare_ThatNotContainsNum ) / ( countEmptyCellInSquare  %  countEmptyCellsInRows_ThatNotContainsNum ))) Max ((( countEmptyCellsInRows_ThatNotContainsNum  Min  countEmptyCellInCol ) % ( countEmptyCellsInRowsContainsNum  Max  countEmptyCellsInRows_ThatNotContainsNum )) / (( countEmptyCellsInRowsContainsNum  Min  countEmptyCellsInSquare_ThatNotContainsNum ) Max ( numOfOptionsToAppearInBoard  *  countEmptyCellInSquare )))) - (((( countEmptyCellsInRows_ThatNotContainsNum  +  countEmptyCellsInRows_ThatNotContainsNum ) + ( countEmptyCellsInSquareContainsNum  +  countEmptyCellsInColsContainsNum )) Min (( countEmptyCellsInSquare_ThatNotContainsNum  /  countEmptyCellInSquare ) + ( countEmptyCellInCol  -  numOfOptionsToAppearInBoard ))) - ((( countEmptyCellsInSquare_ThatNotContainsNum  *  countEmptyCellInSquare ) + ( countEmptyCellsInCols_ThatNotContainsNum  Max  countEmptyCellsInCols_ThatNotContainsNum )) * (( countEmptyCellInRow  Min  countEmptyCellInSquare ) / ( countEmptyCellsInRowsContainsNum  +  countEmptyCellInSquare ))))),
