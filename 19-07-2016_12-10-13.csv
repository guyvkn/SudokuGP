Genetic Sudoku Experiment
Experiment Time: 19/07/2016 12:10:13
Expirement Parameters:,
Orginal Empty Cells:,54,
Population Size:,100,
Max Generations:,50,
Crossover Probability:,0.8,
Mutation Probability:,0.2,
Percent of good indviduals from population:,0.4,
,
Primitive Set:,
Plus,Minus,Multi,div,Mod,Maximum,Minimum,
Terminal Set:,
countEmptyCellInRow,countEmptyCellInCol,countEmptyCellInSquare,NumOfOptionsInCell,numOfOptionsToAppearInBoard,countEmptyCellsInRowsContainsNum,countEmptyCellsInColsContainsNum,countEmptyCellsInSquareContainsNum,countEmptyCellsInRows_ThatNotContainsNum,countEmptyCellsInCols_ThatNotContainsNum,countEmptyCellsInSquare_ThatNotContainsNum,
,
,
Generation,Worst Individual Fitness,Best Individual Fitness,Average Fitness,Best Individual Tree - Prefix,Best Individual Tree - Infix,
0,19.0,4.0,12.02,div( div( Minimum( div( Minimum( numOfOptionsToAppearInBoard  countEmptyCellsInColsContainsNum )  div( countEmptyCellsInColsContainsNum  NumOfOptionsInCell ) )  Minus( Maximum( countEmptyCellsInColsContainsNum  countEmptyCellsInSquare_ThatNotContainsNum )  Mod( countEmptyCellInSquare  countEmptyCellsInRows_ThatNotContainsNum ) ) )  Minimum( Maximum( Plus( NumOfOptionsInCell  countEmptyCellsInColsContainsNum )  Minus( countEmptyCellInRow  countEmptyCellInCol ) )  Mod( Mod( countEmptyCellsInColsContainsNum  countEmptyCellsInRows_ThatNotContainsNum )  Minus( numOfOptionsToAppearInBoard  countEmptyCellInRow ) ) ) )  Minus( Minus( Maximum( Maximum( countEmptyCellsInSquareContainsNum  countEmptyCellsInSquareContainsNum )  Maximum( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInRow ) )  Mod( Minimum( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInCol )  div( countEmptyCellsInRowsContainsNum  NumOfOptionsInCell ) ) )  Mod( Multi( Plus( countEmptyCellsInColsContainsNum  numOfOptionsToAppearInBoard )  Maximum( countEmptyCellsInSquare_ThatNotContainsNum  numOfOptionsToAppearInBoard ) )  Plus( Plus( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  div( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInColsContainsNum ) ) ) ) ),((((( numOfOptionsToAppearInBoard  Min  countEmptyCellsInColsContainsNum ) / ( countEmptyCellsInColsContainsNum  /  NumOfOptionsInCell )) Min (( countEmptyCellsInColsContainsNum  Max  countEmptyCellsInSquare_ThatNotContainsNum ) - ( countEmptyCellInSquare  %  countEmptyCellsInRows_ThatNotContainsNum ))) / ((( NumOfOptionsInCell  +  countEmptyCellsInColsContainsNum ) Max ( countEmptyCellInRow  -  countEmptyCellInCol )) Min (( countEmptyCellsInColsContainsNum  %  countEmptyCellsInRows_ThatNotContainsNum ) % ( numOfOptionsToAppearInBoard  -  countEmptyCellInRow )))) / (((( countEmptyCellsInSquareContainsNum  Max  countEmptyCellsInSquareContainsNum ) Max ( countEmptyCellsInRows_ThatNotContainsNum  Max  countEmptyCellInRow )) - (( countEmptyCellsInSquare_ThatNotContainsNum  Min  countEmptyCellInCol ) % ( countEmptyCellsInRowsContainsNum  /  NumOfOptionsInCell ))) - ((( countEmptyCellsInColsContainsNum  +  numOfOptionsToAppearInBoard ) * ( countEmptyCellsInSquare_ThatNotContainsNum  Max  numOfOptionsToAppearInBoard )) % (( countEmptyCellsInRowsContainsNum  +  countEmptyCellsInCols_ThatNotContainsNum ) + ( countEmptyCellsInRows_ThatNotContainsNum  /  countEmptyCellsInColsContainsNum ))))),
1,22.0,3.0,11.86,Minimum( Maximum( Minimum( Plus( Mod( countEmptyCellsInSquare_ThatNotContainsNum  countEmptyCellInSquare )  Multi( countEmptyCellInSquare  countEmptyCellsInSquare_ThatNotContainsNum ) )  div( Plus( NumOfOptionsInCell  countEmptyCellsInSquare_ThatNotContainsNum )  div( countEmptyCellsInCols_ThatNotContainsNum  NumOfOptionsInCell ) ) )  Mod( Minimum( Plus( countEmptyCellsInRowsContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  Maximum( NumOfOptionsInCell  countEmptyCellsInSquareContainsNum ) )  Maximum( Minus( countEmptyCellsInRowsContainsNum  countEmptyCellsInColsContainsNum )  Mod( countEmptyCellInRow  countEmptyCellInCol ) ) ) )  Maximum( div( Mod( Plus( countEmptyCellInRow  countEmptyCellsInRows_ThatNotContainsNum )  Maximum( countEmptyCellsInSquareContainsNum  NumOfOptionsInCell ) )  Multi( Maximum( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellInSquare )  Mod( countEmptyCellsInRows_ThatNotContainsNum  countEmptyCellsInSquareContainsNum ) ) )  Minus( Minus( Maximum( NumOfOptionsInCell  countEmptyCellsInRowsContainsNum )  Mod( countEmptyCellInCol  NumOfOptionsInCell ) )  div( Plus( NumOfOptionsInCell  countEmptyCellInSquare )  Plus( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInRows_ThatNotContainsNum ) ) ) ) ),((((( countEmptyCellsInSquare_ThatNotContainsNum  %  countEmptyCellInSquare ) + ( countEmptyCellInSquare  *  countEmptyCellsInSquare_ThatNotContainsNum )) Min (( NumOfOptionsInCell  +  countEmptyCellsInSquare_ThatNotContainsNum ) / ( countEmptyCellsInCols_ThatNotContainsNum  /  NumOfOptionsInCell ))) Max ((( countEmptyCellsInRowsContainsNum  +  countEmptyCellsInCols_ThatNotContainsNum ) Min ( NumOfOptionsInCell  Max  countEmptyCellsInSquareContainsNum )) % (( countEmptyCellsInRowsContainsNum  -  countEmptyCellsInColsContainsNum ) Max ( countEmptyCellInRow  %  countEmptyCellInCol )))) Min (((( countEmptyCellInRow  +  countEmptyCellsInRows_ThatNotContainsNum ) % ( countEmptyCellsInSquareContainsNum  Max  NumOfOptionsInCell )) / (( countEmptyCellsInRows_ThatNotContainsNum  Max  countEmptyCellInSquare ) * ( countEmptyCellsInRows_ThatNotContainsNum  %  countEmptyCellsInSquareContainsNum ))) Max ((( NumOfOptionsInCell  Max  countEmptyCellsInRowsContainsNum ) - ( countEmptyCellInCol  %  NumOfOptionsInCell )) - (( NumOfOptionsInCell  +  countEmptyCellInSquare ) / ( countEmptyCellsInCols_ThatNotContainsNum  +  countEmptyCellsInRows_ThatNotContainsNum ))))),
2,20.0,0.0,11.13,div( Minimum( Maximum( Mod( div( countEmptyCellsInSquareContainsNum  countEmptyCellInCol )  Multi( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Maximum( Mod( countEmptyCellsInSquareContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellInCol  countEmptyCellsInSquareContainsNum ) ) )  Multi( Minus( Minimum( countEmptyCellsInSquareContainsNum  NumOfOptionsInCell )  div( NumOfOptionsInCell  NumOfOptionsInCell ) )  Multi( Minimum( countEmptyCellsInColsContainsNum  numOfOptionsToAppearInBoard )  Multi( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInRowsContainsNum ) ) ) )  Minimum( Plus( Minus( div( countEmptyCellInSquare  countEmptyCellsInCols_ThatNotContainsNum )  Multi( countEmptyCellsInRows_ThatNotContainsNum  numOfOptionsToAppearInBoard ) )  Minimum( Minus( numOfOptionsToAppearInBoard  countEmptyCellsInRowsContainsNum )  Minimum( countEmptyCellsInColsContainsNum  countEmptyCellInCol ) ) )  div( div( Maximum( countEmptyCellsInCols_ThatNotContainsNum  countEmptyCellsInCols_ThatNotContainsNum )  Plus( countEmptyCellsInColsContainsNum  countEmptyCellsInCols_ThatNotContainsNum ) )  Mod( div( countEmptyCellInSquare  countEmptyCellInRow )  Plus( countEmptyCellInCol  countEmptyCellsInSquareContainsNum ) ) ) ) ),((((( countEmptyCellsInSquareContainsNum  /  countEmptyCellInCol ) % ( countEmptyCellsInCols_ThatNotContainsNum  *  countEmptyCellsInCols_ThatNotContainsNum )) Max (( countEmptyCellsInSquareContainsNum  %  countEmptyCellsInCols_ThatNotContainsNum ) Max ( countEmptyCellInCol  +  countEmptyCellsInSquareContainsNum ))) Min ((( countEmptyCellsInSquareContainsNum  Min  NumOfOptionsInCell ) - ( NumOfOptionsInCell  /  NumOfOptionsInCell )) * (( countEmptyCellsInColsContainsNum  Min  numOfOptionsToAppearInBoard ) * ( countEmptyCellsInCols_ThatNotContainsNum  *  countEmptyCellsInRowsContainsNum )))) / (((( countEmptyCellInSquare  /  countEmptyCellsInCols_ThatNotContainsNum ) - ( countEmptyCellsInRows_ThatNotContainsNum  *  numOfOptionsToAppearInBoard )) + (( numOfOptionsToAppearInBoard  -  countEmptyCellsInRowsContainsNum ) Min ( countEmptyCellsInColsContainsNum  Min  countEmptyCellInCol ))) Min ((( countEmptyCellsInCols_ThatNotContainsNum  Max  countEmptyCellsInCols_ThatNotContainsNum ) / ( countEmptyCellsInColsContainsNum  +  countEmptyCellsInCols_ThatNotContainsNum )) / (( countEmptyCellInSquare  /  countEmptyCellInRow ) % ( countEmptyCellInCol  +  countEmptyCellsInSquareContainsNum ))))),
